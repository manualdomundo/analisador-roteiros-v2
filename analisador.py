import os
import openai
import asyncio
from datetime import datetime

class AnalisadorRoteiro:
    def __init__(self, api_key=None, modelo="gpt-4o"):
        self._load_env()
        self.client = openai.OpenAI(
            api_key=api_key or os.getenv('OPENAI_API_KEY')
        )
        self.async_client = openai.AsyncOpenAI(
            api_key=api_key or os.getenv('OPENAI_API_KEY')
        )
        self.modelo = modelo
        self.log_requisicoes = []  # Log de todas as requisi√ß√µes
    
    def _load_env(self):
        """Carrega vari√°veis do arquivo .env"""
        try:
            with open('.env', 'r', encoding='utf-8') as f:
                content = f.read()
                for line in content.splitlines():
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key.strip()] = value.strip()
                        print(f"Carregado: {key.strip()}")  # Debug
        except FileNotFoundError:
            print("Arquivo .env n√£o encontrado!")
        except Exception as e:
            print(f"Erro ao ler .env: {e}")
        
    def ler_criterios(self, arquivo_criterios='criterios.txt'):
        """L√™ os crit√©rios do arquivo TXT no formato: T√≠tulo\nDescri√ß√£o\n"""
        try:
            with open(arquivo_criterios, 'r', encoding='utf-8') as f:
                linhas = [linha.strip() for linha in f.readlines()]
            
            criterios = []
            i = 0
            while i < len(linhas):
                if linhas[i]:  # Linha n√£o vazia (t√≠tulo)
                    titulo = linhas[i]
                    descricao = ""
                    i += 1
                    
                    # Ler descri√ß√£o (pr√≥ximas linhas at√© linha vazia ou fim)
                    while i < len(linhas) and linhas[i]:
                        descricao += linhas[i] + " "
                        i += 1
                    
                    criterios.append({
                        'titulo': titulo,
                        'descricao': descricao.strip()
                    })
                else:
                    i += 1
            
            return criterios
        except FileNotFoundError:
            print(f"Arquivo {arquivo_criterios} n√£o encontrado!")
            return []
    
    def ler_roteiro(self, arquivo_roteiro):
        """L√™ o roteiro do arquivo"""
        try:
            with open(arquivo_roteiro, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            print(f"Arquivo {arquivo_roteiro} n√£o encontrado!")
            return None
    
    def _dividir_roteiro(self, roteiro, max_chars=8000):
        """Divide roteiro em partes menores se necess√°rio"""
        if len(roteiro) <= max_chars:
            return [roteiro]
        
        partes = []
        palavras = roteiro.split()
        parte_atual = ""
        
        for palavra in palavras:
            if len(parte_atual + " " + palavra) > max_chars:
                if parte_atual:
                    partes.append(parte_atual.strip())
                parte_atual = palavra
            else:
                parte_atual += " " + palavra if parte_atual else palavra
        
        if parte_atual:
            partes.append(parte_atual.strip())
        
        return partes

    async def analisar_criterio_async(self, roteiro, criterio):
        """Analisa o roteiro com base em um crit√©rio espec√≠fico usando ChatGPT (ass√≠ncrono)"""
        descricao = criterio['descricao'] if isinstance(criterio, dict) else criterio
        
        # Dividir roteiro se for muito grande
        partes_roteiro = self._dividir_roteiro(roteiro)
        
        if len(partes_roteiro) == 1:
            # Roteiro pequeno - an√°lise normal
            return await self._analisar_parte_async(partes_roteiro[0], descricao)
        else:
            # Roteiro grande - analisar partes e consolidar
            print(f"  üìù Roteiro dividido em {len(partes_roteiro)} partes...")
            
            # Analisar todas as partes em paralelo
            tasks = []
            for i, parte in enumerate(partes_roteiro, 1):
                task = self._analisar_parte_async(parte, descricao, parte_num=i)
                tasks.append(task)
            
            print(f"    Analisando {len(tasks)} partes em paralelo...")
            analises_partes = await asyncio.gather(*tasks)
            
            # Consolidar an√°lises
            return await self._consolidar_analises_async(analises_partes, descricao)

    def analisar_criterio(self, roteiro, criterio):
        """Analisa o roteiro com base em um crit√©rio espec√≠fico usando ChatGPT"""
        descricao = criterio['descricao'] if isinstance(criterio, dict) else criterio
        
        # Dividir roteiro se for muito grande
        partes_roteiro = self._dividir_roteiro(roteiro)
        
        if len(partes_roteiro) == 1:
            # Roteiro pequeno - an√°lise normal
            return self._analisar_parte(partes_roteiro[0], descricao)
        else:
            # Roteiro grande - analisar partes e consolidar
            print(f"  üìù Roteiro dividido em {len(partes_roteiro)} partes...")
            
            analises_partes = []
            for i, parte in enumerate(partes_roteiro, 1):
                print(f"    Analisando parte {i}/{len(partes_roteiro)}...")
                analise = self._analisar_parte(parte, descricao, parte_num=i)
                analises_partes.append(analise)
            
            # Consolidar an√°lises
            return self._consolidar_analises(analises_partes, descricao)
    
    async def _analisar_parte_async(self, roteiro_parte, descricao, parte_num=None):
        """Analisa uma parte espec√≠fica do roteiro (ass√≠ncrono)"""
        parte_info = f" (Parte {parte_num})" if parte_num else ""
        
        prompt = f"""
        Analise o seguinte roteiro com base no crit√©rio espec√≠fico abaixo.
        
        CRIT√âRIO A ANALISAR: {descricao}
        
        ROTEIRO:
        {roteiro_parte}
        
        INSTRU√á√ïES IMPORTANTES:
        - Se o crit√©rio for TOTALMENTE ATENDIDO, responda APENAS: "‚úÖ APROVADO"
        - NUNCA adicione explica√ß√µes quando aprovado
        - Se houver problemas, forne√ßa:
          1. "‚ùå N√ÉO ATENDE" ou "‚ö†Ô∏è ATENDE PARCIALMENTE"
          2. Explica√ß√£o do problema
          3. Sugest√µes de melhoria
        
        Seja rigorosamente objetivo.
        """
        
        try:
            # Preparar dados da requisi√ß√£o
            messages = [
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de roteiros de v√≠deo. Seja preciso e conciso."},
                {"role": "user", "content": prompt}
            ]
            
            # Fazer requisi√ß√£o ass√≠ncrona
            response = await self.async_client.chat.completions.create(
                model=self.modelo,
                messages=messages,
                max_tokens=500,
                temperature=0.1
            )
            
            # Extrair dados da resposta
            resposta_content = response.choices[0].message.content
            
            # Log da requisi√ß√£o
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "An√°lise de Crit√©rio (Async)",
                "prompt_chars": len(prompt),
                "resposta_chars": len(resposta_content),
                "tokens_input": response.usage.prompt_tokens if hasattr(response, 'usage') else 0,
                "tokens_output": response.usage.completion_tokens if hasattr(response, 'usage') else 0,
                "tokens_total": response.usage.total_tokens if hasattr(response, 'usage') else 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": resposta_content
            }
            
            self.log_requisicoes.append(log_entry)
            
            return resposta_content
        except Exception as e:
            # Log do erro
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "ERRO (Async)",
                "erro": str(e),
                "prompt_chars": len(prompt),
                "resposta_chars": 0,
                "tokens_input": 0,
                "tokens_output": 0,
                "tokens_total": 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": f"Erro: {str(e)}"
            }
            
            self.log_requisicoes.append(log_entry)
            
            return f"Erro na an√°lise da parte: {str(e)}"

    def _analisar_parte(self, roteiro_parte, descricao, parte_num=None):
        """Analisa uma parte espec√≠fica do roteiro"""
        parte_info = f" (Parte {parte_num})" if parte_num else ""
        
        prompt = f"""
        Analise o seguinte roteiro com base no crit√©rio espec√≠fico abaixo.
        
        CRIT√âRIO A ANALISAR: {descricao}
        
        ROTEIRO:
        {roteiro_parte}
        
        INSTRU√á√ïES IMPORTANTES:
        - Se o crit√©rio for TOTALMENTE ATENDIDO, responda APENAS: "‚úÖ APROVADO"
        - NUNCA adicione explica√ß√µes quando aprovado
        - Se houver problemas, forne√ßa:
          1. "‚ùå N√ÉO ATENDE" ou "‚ö†Ô∏è ATENDE PARCIALMENTE"
          2. Explica√ß√£o do problema
          3. Sugest√µes de melhoria
        
        Seja rigorosamente objetivo.
        """
        
        try:
            # Preparar dados da requisi√ß√£o
            messages = [
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de roteiros de v√≠deo. Seja preciso e conciso."},
                {"role": "user", "content": prompt}
            ]
            
            # Fazer requisi√ß√£o
            response = self.client.chat.completions.create(
                model=self.modelo,
                messages=messages,
                max_tokens=500,
                temperature=0.1
            )
            
            # Extrair dados da resposta
            resposta_content = response.choices[0].message.content
            
            # Log da requisi√ß√£o
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "An√°lise de Crit√©rio",
                "prompt_chars": len(prompt),
                "resposta_chars": len(resposta_content),
                "tokens_input": response.usage.prompt_tokens if hasattr(response, 'usage') else 0,
                "tokens_output": response.usage.completion_tokens if hasattr(response, 'usage') else 0,
                "tokens_total": response.usage.total_tokens if hasattr(response, 'usage') else 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": resposta_content
            }
            
            self.log_requisicoes.append(log_entry)
            
            return resposta_content
        except Exception as e:
            # Log do erro
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "ERRO",
                "erro": str(e),
                "prompt_chars": len(prompt),
                "resposta_chars": 0,
                "tokens_input": 0,
                "tokens_output": 0,
                "tokens_total": 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": f"Erro: {str(e)}"
            }
            
            self.log_requisicoes.append(log_entry)
            
            return f"Erro na an√°lise da parte: {str(e)}"
    
    async def _consolidar_analises_async(self, analises_partes, descricao):
        """Consolida m√∫ltiplas an√°lises em uma resposta final (ass√≠ncrono)"""
        analises_text = "\n\n".join([f"Parte {i+1}: {analise}" for i, analise in enumerate(analises_partes)])
        
        prompt = f"""
        Com base nas an√°lises das partes do roteiro abaixo, forne√ßa uma avalia√ß√£o final:
        
        CRIT√âRIO: {descricao}
        
        AN√ÅLISES DAS PARTES:
        {analises_text}
        
        INSTRU√á√ïES:
        - Se TODAS as partes foram aprovadas, responda: "‚úÖ APROVADO"
        - Se houver problemas em qualquer parte, forne√ßa:
          1. Uma avalia√ß√£o final (N√£o Atende/Parcialmente Atende)
          2. Resumo dos principais problemas encontrados
          3. Sugest√µes espec√≠ficas de melhoria
        
        Seja objetivo e construtivo.
        """
        
        try:
            # Preparar dados da requisi√ß√£o
            messages = [
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de roteiros de v√≠deo."},
                {"role": "user", "content": prompt}
            ]
            
            # Fazer requisi√ß√£o ass√≠ncrona
            response = await self.async_client.chat.completions.create(
                model=self.modelo,
                messages=messages,
                max_tokens=600,
                temperature=0.3
            )
            
            # Extrair dados da resposta
            resposta_content = response.choices[0].message.content
            
            # Log da requisi√ß√£o
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "Consolida√ß√£o (Async)",
                "prompt_chars": len(prompt),
                "resposta_chars": len(resposta_content),
                "tokens_input": response.usage.prompt_tokens if hasattr(response, 'usage') else 0,
                "tokens_output": response.usage.completion_tokens if hasattr(response, 'usage') else 0,
                "tokens_total": response.usage.total_tokens if hasattr(response, 'usage') else 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": resposta_content
            }
            
            self.log_requisicoes.append(log_entry)
            
            return resposta_content
        except Exception as e:
            # Log do erro
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "ERRO - Consolida√ß√£o (Async)",
                "erro": str(e),
                "prompt_chars": len(prompt),
                "resposta_chars": 0,
                "tokens_input": 0,
                "tokens_output": 0,
                "tokens_total": 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": f"Erro: {str(e)}"
            }
            
            self.log_requisicoes.append(log_entry)
            
            return f"Erro na consolida√ß√£o: {str(e)}"

    def _consolidar_analises(self, analises_partes, descricao):
        """Consolida m√∫ltiplas an√°lises em uma resposta final"""
        analises_text = "\n\n".join([f"Parte {i+1}: {analise}" for i, analise in enumerate(analises_partes)])
        
        prompt = f"""
        Com base nas an√°lises das partes do roteiro abaixo, forne√ßa uma avalia√ß√£o final:
        
        CRIT√âRIO: {descricao}
        
        AN√ÅLISES DAS PARTES:
        {analises_text}
        
        INSTRU√á√ïES:
        - Se TODAS as partes foram aprovadas, responda: "‚úÖ APROVADO"
        - Se houver problemas em qualquer parte, forne√ßa:
          1. Uma avalia√ß√£o final (N√£o Atende/Parcialmente Atende)
          2. Resumo dos principais problemas encontrados
          3. Sugest√µes espec√≠ficas de melhoria
        
        Seja objetivo e construtivo.
        """
        
        try:
            # Preparar dados da requisi√ß√£o
            messages = [
                {"role": "system", "content": "Voc√™ √© um especialista em an√°lise de roteiros de v√≠deo."},
                {"role": "user", "content": prompt}
            ]
            
            # Fazer requisi√ß√£o
            response = self.client.chat.completions.create(
                model=self.modelo,
                messages=messages,
                max_tokens=600,
                temperature=0.3
            )
            
            # Extrair dados da resposta
            resposta_content = response.choices[0].message.content
            
            # Log da requisi√ß√£o
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "Consolida√ß√£o",
                "prompt_chars": len(prompt),
                "resposta_chars": len(resposta_content),
                "tokens_input": response.usage.prompt_tokens if hasattr(response, 'usage') else 0,
                "tokens_output": response.usage.completion_tokens if hasattr(response, 'usage') else 0,
                "tokens_total": response.usage.total_tokens if hasattr(response, 'usage') else 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": resposta_content
            }
            
            self.log_requisicoes.append(log_entry)
            
            return resposta_content
        except Exception as e:
            # Log do erro
            log_entry = {
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "modelo": self.modelo,
                "tipo": "ERRO - Consolida√ß√£o",
                "erro": str(e),
                "prompt_chars": len(prompt),
                "resposta_chars": 0,
                "tokens_input": 0,
                "tokens_output": 0,
                "tokens_total": 0,
                "prompt": prompt[:200] + "..." if len(prompt) > 200 else prompt,
                "resposta": f"Erro: {str(e)}"
            }
            
            self.log_requisicoes.append(log_entry)
            
            return f"Erro na consolida√ß√£o: {str(e)}"
    
    async def analisar_roteiro_completo_async(self, arquivo_roteiro, arquivo_criterios='criterios.txt'):
        """Analisa o roteiro completo com todos os crit√©rios (ass√≠ncrono - paralelo)"""
        roteiro = self.ler_roteiro(arquivo_roteiro)
        if not roteiro:
            return None
            
        criterios = self.ler_criterios(arquivo_criterios)
        if not criterios:
            return None
        
        print(f"üöÄ Iniciando an√°lise paralela do roteiro com {len(criterios)} crit√©rios...")
        
        # Criar tasks para an√°lise paralela
        tasks = []
        for i, criterio in enumerate(criterios, 1):
            titulo = criterio['titulo'] if isinstance(criterio, dict) else criterio[:50]
            print(f"üìã Preparando an√°lise do crit√©rio {i}/{len(criterios)}: {titulo}...")
            task = self.analisar_criterio_async(roteiro, criterio)
            tasks.append((criterio, task))
        
        # Executar todas as an√°lises em paralelo
        print(f"‚ö° Executando {len(tasks)} an√°lises em paralelo...")
        resultados = []
        
        for criterio, task in tasks:
            resultado = await task
            resultados.append({
                'criterio': criterio,
                'resultado': resultado
            })
        
        print("‚úÖ An√°lise paralela conclu√≠da!")
        return resultados

    def analisar_roteiro_completo(self, arquivo_roteiro, arquivo_criterios='criterios.txt'):
        """Analisa o roteiro completo com todos os crit√©rios"""
        roteiro = self.ler_roteiro(arquivo_roteiro)
        if not roteiro:
            return None
            
        criterios = self.ler_criterios(arquivo_criterios)
        if not criterios:
            return None
        
        resultados = []
        
        print(f"Iniciando an√°lise do roteiro com {len(criterios)} crit√©rios...")
        
        for i, criterio in enumerate(criterios, 1):
            titulo = criterio['titulo'] if isinstance(criterio, dict) else criterio[:50]
            print(f"Analisando crit√©rio {i}/{len(criterios)}: {titulo}...")
            resultado = self.analisar_criterio(roteiro, criterio)
            resultados.append({
                'criterio': criterio,
                'resultado': resultado
            })
        
        return resultados
    
    def gerar_relatorio(self, resultados, arquivo_roteiro):
        """Gera um relat√≥rio final com todos os resultados"""
        if not resultados:
            return None
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"relatorio_analise_{timestamp}.txt"
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("RELAT√ìRIO DE AN√ÅLISE DE ROTEIRO\n")
            f.write("="*80 + "\n\n")
            f.write(f"Arquivo analisado: {arquivo_roteiro}\n")
            f.write(f"Data da an√°lise: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"N√∫mero de crit√©rios analisados: {len(resultados)}\n\n")
            
            for i, resultado in enumerate(resultados, 1):
                criterio = resultado['criterio']
                titulo = criterio['titulo'] if isinstance(criterio, dict) else criterio
                
                f.write(f"CRIT√âRIO {i}: {titulo}\n")
                f.write("-" * 40 + "\n")
                f.write("An√°lise:\n")
                f.write(resultado['resultado'])
                f.write("\n\n" + "="*80 + "\n\n")
        
        return nome_arquivo